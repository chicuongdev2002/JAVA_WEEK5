package vn.edu.fit.iuh.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import vn.edu.fit.iuh.enities.Candidate;import vn.edu.fit.iuh.repositories.CandidateRepository;import vn.edu.fit.iuh.sevices.CandidateService;import java.util.List;@Controller@RequestMapping("/candidates")public class CandidateController {    @Autowired    private final CandidateService candidateService;    @Autowired    private CandidateRepository candidateRepository;    @Autowired    public CandidateController(CandidateService candidateService) {        this.candidateService = candidateService;    }//    @GetMapping("/")//    public List<Candidate> getAllCandidates() {//        return candidateService.findAll();//    }//@GetMapping("/")//public List<Candidate> getAllCandidates() {//    return candidateRepository.findAllCandidatesWithAddress();//}    @GetMapping("/search")    public String getAllCandidates(Model model) {        List<Candidate> candidates = candidateRepository.findAll();        model.addAttribute("candidates", candidates);        return "candidate/listCandidate";    }    @GetMapping("/{id}")    public ResponseEntity<Candidate> getCandidateById(@PathVariable Long id) {        Candidate candidate = candidateService.findById(id).orElse(null);        if (candidate != null) {            return ResponseEntity.ok(candidate);        } else {            return ResponseEntity.notFound().build();        }    }    @PostMapping("/")    public ResponseEntity<Candidate> createCandidate(@RequestBody Candidate candidate) {        if (candidateService.save(candidate)) {            return ResponseEntity.status(201).body(candidate);        } else {            return ResponseEntity.status(500).build();        }    }    @PutMapping("/{id}")    public ResponseEntity<Candidate> updateAddress(@PathVariable Long id, @RequestBody Candidate candidate) {        candidate.setId(id);        if (candidateService.update(candidate).isPresent()) {            return ResponseEntity.ok(candidate);        } else {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteAddress(@PathVariable Long id) {        if (candidateService.delete(id).isPresent()) {            return ResponseEntity.noContent().build();        } else {            return ResponseEntity.notFound().build();        }    }}